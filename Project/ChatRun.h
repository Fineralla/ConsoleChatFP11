#pragma once
#include <iostream>
#include "IChatInterface.h"
#include "ChatUserInterface.h"
#include "ChatAdminInterface.h"
#include "UserInput.h"
#define test(a) ;

class ChatRun
{
private:
public:
    ChatRun();
    ~ChatRun() = default;
};

ChatRun::ChatRun()
{
    std::unique_ptr<DB> db = std::make_unique<DB>();
    User service_admin("admin", "admin", "1234");
    service_admin.setIsAdmin(true);
    db->addUser(service_admin);                                                         // Service Admin
    db->addUser("complaint_bot", "complaint_bot", "uijyh6758r9ifSDFGH&^tf34rdfcvgtre"); // –±–æ—Ç –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç—Å—ã–ª–∞—é—Ç—Å—è –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    ChatUserInterface userInterface;
    ChatAdminInterface adminInterface;

// —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
#ifdef test
    db->addUser("–ú–∞–∫—Å–∏–º", "mmn", "pass");      // 2
    db->addUser("–ò–≤–∞–Ω", "ivanKispaj", "pass"); // 3
    db->addUser("–ò—Ä–∏–Ω–∞", "Fineralla", "pass"); // 4
    db->addUser("Vasya", "vas", "pass");       // 5

    User u("–Ω–∏–∫–æ–ª–∞–π", "nick", "pass");
    u.setIsBanned(true);
    db->addUser(u);

    Message msg;
    msg.setMessage("–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!");
    msg.setAuthorID(2);
    db->AddMessageToAllUsers(msg);

    msg.setMessage("–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç üëã!");
    msg.setAuthorID(3);
    db->AddMessageToAllUsers(msg);

    msg.setMessage("–ö–∞–∫ —É –Ω–∞—Å –¥–µ–ª–∞? üî• ;-))))))");
    msg.setAuthorID(4);
    db->AddMessageToAllUsers(msg);

    msg.setMessage("–ù–∞–¥–µ—é—Å—å –≤—Å—ë —Ö–æ—Ä–æ—à–æ");
    db->AddMessageToAllUsers(msg);
#endif

    chat::Results userInput = chat::empty;
    chat::Results result = chat::empty;
    // –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    UserInput<std::string, chat::Results> coreAreaPage("–ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞–Ω–∏—Ü–∞",
                                                       "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è: —á - –ß–∞—Ç, –∞ - –†–∞–∑–¥–µ–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤ - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã ",
                                                       "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥",
                                                       3 // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞
    );

    // —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞
    coreAreaPage.addInputs("—á", "–∞", "–≤");
    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–≤–æ–¥–∞
    coreAreaPage.addOutputs(chat::chat, chat::admin, chat::app_exit);

    do
    {
        userInput = coreAreaPage.IOgetline();
        switch (userInput)
        {
        case chat::chat:
            system(clear);
            result = userInterface.run(std::move(db));
            db = std::move(userInterface.db);
            break;
        case chat::admin:
            result = adminInterface.run(std::move(db));
            db = std::move(adminInterface.db);
            break;
        case chat::app_exit:
            result = chat::app_exit;
            break;
        default:
            std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥" << std::endl;
            break;
        }
    } while (result != chat::app_exit);
    std::cout << "–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è." << std::endl;
}